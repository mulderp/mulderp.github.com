<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>thinking_on thinking</title>
 <link href="http://mulderp.github.com/atom.xml" rel="self"/>
 <link href="http://mulderp.github.com/"/>
 <updated>2013-01-27T15:55:38+01:00</updated>
 <id>http://mulderp.github.com</id>
 <author>
   <name>Patrick Mulder</name>
   <email>mulder.patrick@gmail.com</email>
 </author>

 
 <entry>
   <title>What is modular code?</title>
   <link href="http://mulderp.github.com/what-is-modular-architecture"/>
   <updated>2013-01-26T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/what-is-modular-architecture</id>
   <content type="html">&lt;p&gt;Designing the architecture of a web application is difficult. First, there are many different programming languages among which to chose, then there are many frameworks , some leave design decisions to the programmer, some come “opinionated’ (= with default settings/strategies). Additionally, within each framework, a number of plugins exists that often solve similar problems, yet have different solution approaches.&lt;/p&gt;

&lt;p&gt;In order to help system designers to make decisions, programmers talk about applying “patterns” or using a “pattern language”. Patterns give some heuristics, whether a system composition makes sense, or will be risky in the future. In my view, a number of patterns are driven by making code and systems modular, a concept that I read in a book some years ago. Modular code (and data) should be easier to re-use, and allow to extend and adapt ideas where needed. &lt;/p&gt;

&lt;p&gt;One of the most important pattern in a web application is called Model-View-Controller (MVC). a nice background discussion by Trygve Reenskaug (who discovered the MVC pattern in the 1970ies) can be found &lt;a href=&quot;https://groups.google.com/group/object-composition/msg/b9366f3bc78a33f8&quot;&gt;here&lt;/a&gt;, I will use the following definitions for MVC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model: All data items are representations of the real things; they make up the Model. &lt;/li&gt;
  &lt;li&gt;View: A View is componenent that transforms a model into something visible. A View is both input and output. A View is also a filter showing the interesting parts only [to a user].&lt;/li&gt;
  &lt;li&gt;Controller: The Controller sets up and coordinates one or more Views. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, in the context of (mobile) web applications, where views are livining in (mobile) browsers that require a lot JavaScript, new design decisions for an application arise. Here are 2 questions that would impact the application design: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;how-do-we-serve-views-to-a-client&quot;&gt;How do we serve “views” to a client?&lt;/h2&gt;
    &lt;p&gt;As long as a MVC stack lives on a server (e.g. a standard Rails application), this question is easy to answer. Views can easily access model instances, and the rendered views can be served from server to clients.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a mobile context however, the view rendering might happen on the client-side for efficiency. Or, in the context of a single-page application, views are only partially updated as needed. These designs need to prepare assets for clients, and new tool-chains are becoming popular. I wrote about some experiences of working with assets &lt;a href=&quot;http://thinkingonthinking.com/MVC-and-Rails-API/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since my programming background the last year was mainly in Ruby, I have been looking into serving assets with Sinatra and authenticating HTTP requests with Rack. Other basic assets servers, such as Node.JS based might be interesting to look at too.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;how-to-organize-view-modules&quot;&gt;How to organize “view” modules?&lt;/h2&gt;
    &lt;p&gt;This is the second important part of the application where I have been doing some experiments the last months&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, far in Backbone, my application structure starts to look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.js
main.js

/collections
/models
/views
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>How I am (re-)discovering working with JavaScript</title>
   <link href="http://mulderp.github.com/how-I-start-liking-javascript-again"/>
   <updated>2013-01-23T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/how-I-start-liking-javascript-again</id>
   <content type="html">&lt;p&gt;Having programmed in Assembler, C/C++, Java and in Ruby, I was always confused on how people are doing stuff in JavaScript - until recently luckily. In imperative languages, you learn to think about how to ‘control’ data; in JavaScript however, you think about this: What are your data structures (DOM/HTML/API resources)? And, how do changes in data structures look like?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As a start, the &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON syntax&lt;/a&gt;, which is used everywhere in JavaScript, forces you to think about embedding and grouping values in data structures. Showing a resource in JSON can easily give feedback, if your data contains garbage (or not). And additionally, JSON in JavaScript code allows you to easily access attributes and properties. E.g. compare:&lt;/p&gt;

    &lt;p&gt;activity.friday.noon in JavaScript vs activity[:friday][:noon] in Ruby.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, the &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore.js&lt;/a&gt; library brings a lot of Ruby-like syntactic sugar into working with JavaScript. Especially, it helps you to hide nasty, dynamic loops, that would require you to use incrementors (e.g. for (i = 0; … ) ) or suddenly break a loop. Underscore.js gives a lot of nice, little tools to work with lists and functions. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your data structures can contain (anonymous) functions (= lambdas). This is great if you want to override default values with small computations when needed. Especially, using anonymous functions as properties is the core to understand how e.g. &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; enables a model-view-controller pattern (which is a rather complex topic, see &lt;a href=&quot;http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/&quot;&gt;http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/&lt;/a&gt;) &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Composition of functions is very easy with a library such as &lt;a href=&quot;http://requirejs.org/&quot;&gt;requirejs&lt;/a&gt;. This reminds me a bit on the concept of dependency injection, which in other languages is rather difficult to achieve (at least without getting lost). Anyway, there is also some discussion whether requiring JavaScript code with requirejs is actually &lt;a href=&quot;http://stackoverflow.com/questions/7708194/dependency-injection-with-requirejs&quot;&gt;injecting dependencies&lt;/a&gt;. Still, my experiments so far yield very, very modular code, something I like very much (getting out of the spaghetti code hell)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What are your experiences with JavaScript compared to other languages?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New kid on the Blog</title>
   <link href="http://mulderp.github.com/new-kid-on-the-blog"/>
   <updated>2013-01-18T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/new-kid-on-the-blog</id>
   <content type="html">&lt;p&gt;The more I am getting into Ruby and Rails development, the more I experience that blogs help, inspire, connect, do business. So, it’s getting time to redefine my voice in the web, share memes on programming and web evolution. Maybe this post might inspire you or is helpful to you. Here is what inspired me and helped me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First, my motivation to share ideas in a blog was re-energized by meeting bloggers on conferences (BaRuCo, RuPy) and in the web, e.g. some include posts on Chef by &lt;a href=&quot;http://nathenharvey.com&quot;&gt;Nathen Harvey&lt;/a&gt;, Rails posts by &lt;a href=&quot;http://words.steveklabnik.com/&quot;&gt;Steve Klabnik&lt;/a&gt;, BDD posts by &lt;a href=&quot;http://blog.mattwynne.net/&quot;&gt;Matt Wynne&lt;/a&gt;, &lt;a href=&quot;http://businessmodelalchemist.com&quot;&gt;Alex Osterwalder&lt;/a&gt; on redefining business strategy, and last but not leasts product/software/devop posts by &lt;a href=&quot;http://svn.37signals.com&quot;&gt;37signals&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I restarted my blogging activities on blogger some weeks ago, I came across an article by &lt;a href=&quot;http://al3x.net/about.html&quot;&gt;Alex Payne&lt;/a&gt;, on how he ended up on hosting his blog on github pages. My last blogging activities were based on blogger.com; but programmers like editors, source control, and control of details in layouts and JavaScript interaction. So, time to say goodbye to blogger.com&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Somehow, I was reminded that in the &lt;a href=&quot;http://shop.oreilly.com/product/0636920019664.do&quot;&gt;Sinatra book&lt;/a&gt; by Konstantin Haase some Git/Sinatra workflow for blogging was mentioned. I tried this workflow, but Sinatra support on Github pages seems not to be the cutting edge. (If someone knows why, let me know). So, the cutting edge is &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, a static site generator that “transforms your text into a monster”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily, it took not much, to let Jekyll render the words you are reading here, from my editor to your web browser, because of 2 great web resources:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Jekyll parent blog of this blog came from &lt;a href=&quot;https://github.com/Sirupsen/sirupsen.github.com&quot;&gt;Sirupsen&lt;/a&gt;, who has put together a lot of nice design details into his templates.&lt;/li&gt;
  &lt;li&gt;A small overview on how to add all kinds of widgets to your blog, such as comments, Twitter links, and more: http://erjjones.github.com/blog/How-I-built-my-blog-in-one-day/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, let me know what you think! I am happy to find out more about you readers, how you came hear, what you find helpful, when you read this. That’s all for now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DOM feedback with JavaScript Jasmine</title>
   <link href="http://mulderp.github.com/DOM-feedback-with-JavaScript-Jasmine"/>
   <updated>2012-12-18T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/DOM-feedback-with-JavaScript-Jasmine</id>
   <content type="html">&lt;p&gt;In my first attempts to develop frontend interactions with Backbone.js, I discovered some blind spots in my understanding of Backbone views. Especially, I find the different options to organize views with parent and child-views, as well as attaching views to DOM nodes difficult. A nice overview on Backbone pitfalls is given &lt;a href=&quot;http://blog.8thlight.com/cymen-vig/2012/12/13/reflections-on-using-backbone-js.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As in many programming matters, thinking about outcomes and tests can help to write better code. This is where &lt;a href=&quot;http://jasminejs.org/&quot;&gt;Jasmine&lt;/a&gt; can help in the development of Backbone applications.&lt;/p&gt;

&lt;p&gt;First, there are several options to run Jasmine:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The most common option for running Jasmine specs is by having your default web browser loading a test DOM (from e.g. spec/index.html or spec/SpecRunner.html). Within this option you can declare a number of JavaScript dependencies that contain the actual specs, and that will be executed as soon as the Jasmine execution is triggered (with jasmine.getEnv().execute(); ).
Another option is to run Jasmine specs through rake. This option seems to be very popular in the Rails community; but as I am thinking more towards development of stand-alone frontend applications, I don’t want to have a tight Rails coupling. I could not get rake jasmine to render my specs from the Backbone setup; so, I will postpone this approach for a while. Maybe someone of you has made some more successful experiments?&lt;/li&gt;
  &lt;li&gt;Another interesting attempt to get feedback from the DOM is to run Jasmine through a headless browser. PhantomJS comes naturally to mind in this context, and some interesting article is &lt;a href=&quot;http://blog.jphpsf.com/2012/10/31/running-Jasmine-tests-with-Phantom-js-or-Webdriver/http://obtiva.com/blog/112-javascript-specs-with-jasmine-a-primer-for-rubyists-part-1&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a first step to testing a Backbone application, I wanted to test some basic Backbone view properties. Now, one of the difficulties that I found was, how to actually load all dependencies into a browser with SpecRunner.html including RequireJS; and, execute some specs.&lt;/p&gt;

&lt;p&gt;I found two approaches that work for me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;global-declaration-of-backbone-dependencies&quot;&gt;Global declaration of backbone dependencies&lt;/h2&gt;

    &lt;script type=&quot;text/javascript&quot; src=&quot;../public/js/libs/jquery/jquery.js&quot;&gt;

&lt;/script&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;References to JQuery, Underscore and BackboneJS can be declared in a global way in the SpecRunner.html as follows:
* This should give access to the Backbone library where you need them. It works good enough, but maybe it’s useful to load your dependencies more in a dynamic way if your application grows. For this, the next option might be more interesting.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;loading-backbone-dependencies-with-requirejs&quot;&gt;Loading Backbone dependencies with RequireJS&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When using several dependencies (including custom views, collections, routers, etc.), requiring every module in the global scope of SpecRunner.html might result into increased editing efforts. Here is an attempt to re-use some module definitions with requirejs that could in principle be shared between your tests and the real application.&lt;/p&gt;

&lt;p&gt;First, to load dependencies with requirejs, the following lines are needed in the specrunner.html&lt;/p&gt;

&lt;p&gt;The first line refers to the jasmine-require project by Scott Burch that helps to require dependencies from within specs. Some example how this can be used with a JavaScript framework is shown here from the Pattern JS project.&lt;/p&gt;

&lt;p&gt;With Backbone this might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  requireDependencies([&quot;underscore&quot;, &quot;backbone&quot;], function(_, Backbone) {
    View = Backbone.View.extend({tagName: &quot;li&quot; });
    view = new View();
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;other-approaches&quot;&gt;Other approaches&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another option to load dependencies with requirejs was described in &lt;a href=&quot;https://groups.google.com/forum/?hl=en_US&amp;amp;fromgroups=#!searchin/jasmine-js/requireJS/jasmine-js/7HJYbi705PE/XkpLR2DwQ0sJ&quot;&gt;this discussion&lt;/a&gt; in the Jasmine user group by using  testr.js However, I did not understand yet, how this is better than the previous option. (Maybe someone wants to comment?)&lt;/p&gt;

&lt;p&gt;Last but not least, there is an interesting Jasmine setup with RequireJS here by Peter Toomberg’s Shortcut project. This one does not require any additional setup declarations, but I did not yet look into this too much.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Before actually running a succesful Jasmine spec for a Backbone view, we need a library to actually match DOM nodes with expected values. The common library for doing this are the Jasmine-JQuery matchers These allow to express many things, among if the .el property of a Backbone view actually match a DOM node as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;View = Backbone.View.extend({tagName: &quot;li&quot; });   view = new View();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it(“has el property”, function() {
    expect(view.el).toBe(“li”);                                                                                                            &lt;br /&gt;
  });&lt;/p&gt;

&lt;p&gt;My current setup can be found here: &lt;a href=&quot;https://github.com/mulderp/backbone-require-test/tree/view_specs&quot;&gt;https://github.com/mulderp/backbone-require-test/tree/view_specs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, so far my findings. Maybe they are helpful for others. I would be curious to hear what you think? How you approach testing of DOM nodes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rake-Pipeline, Rails-API, Backbone.JS</title>
   <link href="http://mulderp.github.com/MVC-and-Rails-API"/>
   <updated>2012-12-14T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/MVC-and-Rails-API</id>
   <content type="html">&lt;p&gt;Nowadays mobile browsers and changing use cases for web applications, require programmers to understand detailed DOM abstractions (usually html5 tags, css, js) as well as API’s that talk to a number of different client setups. Although Ruby-on-Rails has brought us a long way to easily meet our business goals, I had the feeling to be stuck when it came to use Backbone with Rails.&lt;/p&gt;

&lt;p&gt;There is Sprockets; and as long as I work with JQuery and use Twitter Bootstrap as default assets, Sprockets worked nicely: Sprockets gives some nice abstractions to bundle external asset dependencies, but if you want to develop your own client-side assets (e.g. Backbone programming and work with a Sass precompiler and Compass) Sprockets has some learning curve, and debugging asset problems is often painful. Also, for client-side development dealing with problems through a Rails stack is in my opinion not so ideal.&lt;/p&gt;

&lt;p&gt;Now, over the last months, I’ve found some options for a new toolchain that allows a better combination of client- and server-side programming. Here are my findings:&lt;/p&gt;

&lt;h2 id=&quot;rake-pipeline&quot;&gt;Rake-Pipeline&lt;/h2&gt;

&lt;p&gt;I’ve discovered this tool shortly after the great &lt;a href=&quot;http://baruco.org/&quot;&gt;Baruco conference&lt;/a&gt; 2012 in Barcelona. After talks from &lt;a href=&quot;http://blog.cookiestack.com/&quot;&gt;Josh Kalderimis&lt;/a&gt; and &lt;a href=&quot;https://github.com/rkh&quot;&gt;Konstantin Haase&lt;/a&gt; on software development at Travis, it was a nice discovery to see how Travis manages a modular &lt;a href=&quot;http://github.com/travis-ci/travis-assets.git&quot;&gt;asset repository&lt;/a&gt;. The tool that makes this work is: rake-pipeline. Here some background information on rake-pipeline:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Assetfile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;defines how precompilers, concat and copy commands can be combined to generate your assets as needed from a bunch of asset source files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rakep build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command reads the Assetfile definition and performs the actions on the sources. It’s the asset build step so to say.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rakep server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when developing your client-side assets, you actually don’t need to run rakep build from the command line. rakep server gives you a Sinatra server that nicely serves assets as they change during development.
Also, as a nice debugger for rake-pipeline, is a minimalistic Python webserver python -m SimpleHTTPServer that directly can serve all your files from the directory where you are in (e.g. /public). Quite handy if you just need some server, for quick-and-dirty browser debugging and experimentation.
So far about building assets, next about serving data that assets want… we’ll move on to:&lt;/p&gt;

&lt;h2 id=&quot;rails-api&quot;&gt;Rails-Api&lt;/h2&gt;

&lt;p&gt;Some weeks ago at &lt;a href=&quot;http://rupy.eu/&quot;&gt;Rupy in Brno&lt;/a&gt;, there was a great melting pot of Ruby, Python and JavaScript programmers, and if you were looking for the lowest common denominator, it might have been JSON and REST. Now, there is some discussion recently headed by &lt;a href=&quot;http://designinghypermediaapis.com/&quot;&gt;Steve Klabnik&lt;/a&gt; on how to interprete Roy Fielding’s ideas for modern Rails applications, but in this context, some nice tools are ready for use: The Rails-Api stack (and ActiveSerializer)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/rails-api/rails-api&quot;&gt;Rails-Api&lt;/a&gt; removes the Rails ERB templates and Sprockets from your application. This is nice, because your Rack stack becomes lighter, and you can focus on the thing that matters: Serving data to clients. From first experiments, Rails-API combines very nicely with rake-pipeline. As you can see from my &lt;a href=&quot;https://github.com/mulderp/rails-api-backbone&quot;&gt;demo-project&lt;/a&gt;, the Rails app just servers JSON to client-side code that is built with rake-pipeline from the /source directory.&lt;/p&gt;

&lt;h2 id=&quot;backbonejs-underscorejs-and-requirejs&quot;&gt;Backbone.js, Underscore.js and Require.js&lt;/h2&gt;

&lt;p&gt;Last but not least, for my application design, I want to use a JS framework that allows to structure the interaction with the DOM and with the end-user. This framework is Backbone.js - but maybe first, a step back.&lt;/p&gt;

&lt;p&gt;As a Ruby programmer, you think JavaScript has some problems: Incompatible browsers with different language implementations, as well as language constructs that leave you alone quite fast. At least part of the language problems are solved by JQuery and Underscore.js (which reminds on Ruby, see the collection stuff and enumerator constructs at underscorejs.org&lt;/p&gt;

&lt;p&gt;For the rest, a lot of folks from the Node.js community is an example of disruptive innovation at work; especially it is interesting to see, that the JS community nowadays has a modular requirement setup to manage dependencies: require.js. In my view, this will make fancy browser (and maybe one day server) programming fun again.&lt;/p&gt;

&lt;p&gt;What you need to know as Rails programmer, Require.js injects dependencies where they are needed, and as such prevents problems in the global scope. Additionally, you can inject HTML templates into your JS modules, which is very nice too. I’ll need to explore this, but you can actually take your Rails ERB templates and inject them 1-1 to Backbone templates, where you need them. Some ideas behind this technique are discussed by Thomas Davis, here. A boilerplate for backbone and require-js is here. Another nice overview on Backbone development is here and here (Backbone and Require.js).&lt;/p&gt;

&lt;p&gt;That’s all for now.&lt;/p&gt;

&lt;p&gt;Here some references to my &lt;a href=&quot;https://github.com/mulderp/rails-api-backbone&quot;&gt;Rake-Pipeline-Rails-Api-BackboneJS-RequireJS experiment&lt;/a&gt;. I hope to share some small screencasts soon, to show you why this toolchain is cool. At least for me, these tools make me #happy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An experiment with Vagrant and Neo4J</title>
   <link href="http://mulderp.github.com/An-experiment-with-Vagrant-and-Neo4J"/>
   <updated>2012-12-10T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/An-experiment-with-Vagrant-and-Neo4J</id>
   <content type="html">&lt;p&gt;The RuPy conference 2012 in Brno was very inspiring! Especially, there were some interesting talks on databases and scalable approaches to web development:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First,  the ArangoDB team from Cologne set the tone why #nosql matters (see http://www.arangodb.org/ ) . The triAGENS team has written a database which mixes elements from MongoDB and graph databases. The shell of Arangodb looks very clean, and additionally, the system is based on C++ (= integrates with V8 JS engine and MRuby). &lt;/li&gt;
  &lt;li&gt;Another interesting talk was by Mitchell Hashimoto. He showed how Vagrant came into place, and why using isolated, virtual environments make sense for web integration. Some slides (not from Rupy) about this are here slideshare.net/mitchellh/sf-devops-introducing-vagrant&lt;/li&gt;
  &lt;li&gt;Andreas Ronge gave a very nice talk on what graphs can do, and SQL can’t (well, it can, but not nicely … ) I can’t find his slides from RuPy right now, but he maintains a great blog on Neo4J here:  http://maxdemarzi.com/ Also, these slides are interesting: slideshare.net/andreasronge/neo4jrb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, ok, coming home to Munich with all these interesting thoughts in my mind, it was clear, that I had to start playing with graph databases in isolated environments for new kind of web applications. Fortunately, I had great input for my learnings from Jorge Bianquetti and Nathen Harvey.&lt;/p&gt;

&lt;p&gt;First about Vagrant and VirtualBox. It takes a bit of time to download virtual machines, but it’s not too difficult to get going. The single, most important command might be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates an environment for setting up a virtual machine. It’s very cool, because now, you can imagine to setup an Ubuntu, Debian, CentOS, or whatever system, and vagrant will try to go ahead, download or copies the VM and prepares it just that you can use it.&lt;/p&gt;

&lt;p&gt;Ok, not quite, since next, you must tell Vagrant where to download the box; you do it in the Vagrantfile,  e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.box = &quot;opscode-ubuntu-12.04&quot;
config.vm.box_url = &quot;https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box&quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s the standard Ubuntu box from Opscode right now.
Just do a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you would have an Ubuntu box running.&lt;/p&gt;

&lt;p&gt;Well, we were charmed by graph databases, weren’t we?  Ok, so, let’s go ahead and add the setup for Neo4J. Some googling gives, that we have a Neo4J cookbook here: https://github.com/michaelklishin/neo4j-server-chef-cookbook&lt;/p&gt;

&lt;p&gt;Hmm.. in this stage, we actually decided already for chef-solo. There is chef-solo and chef-server, and if you want to understand the difference, I suggest you look here: http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2/&lt;/p&gt;

&lt;p&gt;Chef-server is the approach you want to use in production. Chef-solo is the approach for quick-and-dirty experiments, like we do here. So, let’s assume, chef-solo is ok, and we just need to get the cookbooks dependencies right. Luckily, we have a tool for this: chef-librarian.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ chef-librarian init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives you a Cheffile. It’s similar to a Gemfile if you are used to Ruby.
Let’s throw in the Neo4J dependency here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cookbook 'apt'
cookbook 'neo4j-server', :git =&amp;amp;gt; 'http://github.com/michaelklishin/neo4j-server-chef-cookbook'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, similar to bundle install, we run librarian-chef install&lt;/p&gt;

&lt;p&gt;Last, but not least, we need to tell our VM that interaction with chef-solo is needed. You’ll do this by adding something into the Vagrantfile :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.provision :chef_solo do |chef|
  chef.cookbooks_path = &quot;cookbooks&quot;
  chef.add_recipe &quot;apt&quot;
  chef.add_recipe &quot;neo4j-server::tarball&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, now we only need to build our server, since our ingredients are prepared, and chef is ready for cooking. The magic command is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see something like: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2012-12-10T20:33:58+00:00] INFO: *** Chef 10.14.4 ***
[2012-12-10T20:33:59+00:00] INFO: Setting the run_list to [&quot;recipe[apt]&quot;, &quot;recipe[neo4j-server::tarball]&quot;] from JSON
[2012-12-10T20:33:59+00:00] INFO: Run List is [recipe[apt], recipe[neo4j-server::tarball]]
[2012-12-10T20:33:59+00:00] INFO: Run List expands to [apt, neo4j-server::tarball]
[2012-12-10T20:33:59+00:00] INFO: Starting Chef Run for vagrant.vm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes a while…. &lt;/p&gt;

&lt;p&gt;Eventually, you end up successfully, and you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, your VM has Neo4J running on it, and if you enable port forwarding in Vagrant, you might even go to: localhost:7474 and enjoy your fresh Neo4J server.&lt;/p&gt;

&lt;h2 id=&quot;some-references&quot;&gt;Some References:&lt;/h2&gt;

&lt;p&gt;Chef and Neo4J
* Vimeo screencast: https://vimeo.com/55085049, see: 
  Screencast Install Neo4j-server with Chef from Patrick Mulder on Vimeo.&lt;/p&gt;

&lt;p&gt;Git repo: https://github.com/mulderp/chef-neo4j
Chef basic steps with Nathen Harvey from Opscode
Learning Chef Part 1
Learning Chef Part 2
Learning Chef Part 3&lt;/p&gt;
</content>
 </entry>
 
</feed>
