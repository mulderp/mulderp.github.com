<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>thinking_on thinking</title>
 <link href="http://mulderp.github.com/atom.xml" rel="self"/>
 <link href="http://mulderp.github.com/"/>
 <updated>2013-02-16T13:48:41+01:00</updated>
 <id>http://mulderp.github.com</id>
 <author>
   <name>Patrick Mulder</name>
   <email>mulder.patrick@gmail.com</email>
 </author>

 
 <entry>
   <title>Organizing a Backbone Application</title>
   <link href="http://mulderp.github.com/organizing-a-backbone-application"/>
   <updated>2013-02-15T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/organizing-a-backbone-application</id>
   <content type="html">&lt;p&gt;Backbone should help to organize your frontend JavaScript stack, but as an application grows, this is not so easy. I am grateful to &lt;a href=&quot;https://twitter.com/netzzwerg&quot;&gt;Bela Varga&lt;/a&gt; with whom I lately discussed patterns of Backbone code organization. By the way, the idea of this post came from these slides: &lt;a href=&quot;http://backbone-patterns.heroku.com/&quot;&gt;these patterns&lt;/a&gt; by &lt;a href=&quot;http://twitter.com/julio_ody&quot;&gt;julio_ody&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;top-level-organization-of-a-backbone-project&quot;&gt;Top-level organization of a Backbone project&lt;/h2&gt;

&lt;p&gt;This pattern is helpful to quickly find and re-use structures and logic of Backbone modules. As Backbone comes with no directory structure as default, it leaves the decisions up to the developer how to setup files and directories. One directory layout that is often found in a Backbone project is this:&lt;/p&gt;

&lt;pre&gt;
   |-collections
   |-libs
   |---backbone
   |---isotope
   |---jquery
   |---jquery-fileupload
   |---jquery-ui
   |---require
   |---underscore
   |-models
   |-templates
   |-views
&lt;/pre&gt;

&lt;p&gt;This works very well for me now: There are directories for the Models, Collections, Views and Templates, as well as a directory for the dependencies. If you want to learn more on how a RequireJS based setup works, &lt;a href=&quot;http://backbonetutorials.com/&quot;&gt;here&lt;/a&gt; is a nice tutorial.&lt;/p&gt;

&lt;h2 id=&quot;appjs-contains-views---not-collections&quot;&gt;App.js contains views - not collections&lt;/h2&gt;

&lt;p&gt;In a single-page application, there will be many views that need to be arranged. Now, in my first experiments, I instantiated views in the Router with: &lt;/p&gt;

&lt;pre&gt;
new SomeView(...)
&lt;/pre&gt;

&lt;p&gt;together with:&lt;/p&gt;

&lt;pre&gt;
collection.fetch(...) 
&lt;/pre&gt;

&lt;p&gt;to populate a view with data. This quickly leads to exploding dependencies in the Router. A better way to organize views is the following:&lt;/p&gt;

&lt;pre&gt;
    var AppRouter = Backbone.Router.extend({
        routes: {
	      '': 'showPostListView',
	      '/posts/:id': 'showPostDetailView',
        },

        showPostListView: function() {
	      new PostListView();
        },

       	showPostDetailView: function(post) {
	      new PostDetailView({id: post});
        }
    });

&lt;/pre&gt;

&lt;p&gt;The idea is that the Views know which collection and models they bind too, and whether to fetch data or not. Here, we don’t need to require any Collection or Model since this will be done from within a view.&lt;/p&gt;

&lt;h2 id=&quot;naming-views&quot;&gt;Naming Views&lt;/h2&gt;
&lt;p&gt;Naming is always hard. And I found naming things on the frontend to be slightly different from naming things in the backend. In the Backend, you might want to orientate at naming things to entities from a domain; in a single-page app, you might want to name things after how you want to show or interact with data.&lt;/p&gt;

&lt;p&gt;For example, one common frontend pattern is to show and interact with items in a collection. It’s what the basic Backbone &lt;a href=&quot;http://backbonejs.org/examples/todos/index.html&quot;&gt;ToDo&lt;/a&gt; shows, but what I understand now is the importance of naming:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A ‘ListView’ identifies a view that belongs to a collection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An ‘ItemView’ identifies a view that belogns to a model.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when you break up your single-page app into different views, having this simple rule above helps in structuring the different states of the frontend. Also, ListView are slightly less bound to templates, but rather act as parent views for different item sub-views.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the main structure of a frontend application, it’s good to start thinking in views first. Views fetch data when needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are views that manage other views, and views that render templates. So far, my ‘umbrella-views’ just instantiate sub-views, that fetch data respectively.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There seems to be some conventions on naming views in Backbone. So far, I use ‘ListView’ and ‘ItemView’ to name views on collections, or the elements (= items) in a collection.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Transforming collections in Ruby</title>
   <link href="http://mulderp.github.com/map-reduce-in-ruby"/>
   <updated>2013-02-09T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/map-reduce-in-ruby</id>
   <content type="html">&lt;p&gt;Combinations of Arrays and Hashes in Ruby are very powerful, as shown in &lt;a href=&quot;http://gistflow.com/posts/670-visualising-database-1&quot;&gt;this nice article&lt;/a&gt; on visualizing user registrations and activity in a web application with Google Charts. After starting my own visualization experiments, I felt that I had some blind spots in understanding Ruby’s &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/Enumerable.html&quot;&gt;Enumerable Module&lt;/a&gt;. This post attempts to share some insights on expanding and reducing Arrays of objects.&lt;/p&gt;

&lt;p&gt;First, let’s assume our data looks like:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
signups = [&quot;2011-08&quot;=&amp;gt;1433, &quot;2011-09&quot;=&amp;gt;2972, &quot;2011-10&quot;=&amp;gt;2480, &quot;2011-11&quot;=&amp;gt;2456]
logins = [&quot;2011-08&quot;=&amp;gt;2832, &quot;2011-09&quot;=&amp;gt;4172, &quot;2011-10&quot;=&amp;gt;3480, &quot;2011-11&quot;=&amp;gt;5456]
&lt;/pre&gt;

&lt;p&gt;My goal was to combine the two collections and transform the result into:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
activity = [ &quot;2011-08&quot; =&amp;gt; { :signups =&amp;gt; 1433, :logins =&amp;gt; 2832 } ...
&lt;/pre&gt;

&lt;p&gt;In the exploration, I touched questions on #merge and #to_a of Hashes combined with #first and #last of Arrays, and #map, #inject, #group_by for Enumerables. Let’s start.
## Splitting a Hash
My first step was to split the larger collection hash into single hashes. For this &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-first&quot;&gt;first&lt;/a&gt; and &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-to_a&quot;&gt;to_a&lt;/a&gt; methods help like this:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
signups.first.to_a
=&amp;gt; [[&quot;2011-08&quot;, 1433], [&quot;2011-09&quot;, 2972], [&quot;2011-10&quot;, 2480], [&quot;2011-11&quot;, 2456]]
&lt;/pre&gt;

&lt;p&gt;There is one caveat with inverse transformation, i.e. converting above Array back to Hashes. I knew that:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
Hash[1,2]
=&amp;gt; {1 =&amp;gt; 2}
&lt;/pre&gt;

&lt;p&gt;but this does not work:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[[&quot;2011-08&quot;, 1433], [&quot;2011-09&quot;, 2972], [&quot;2011-10&quot;, 2480], [&quot;2011-11&quot;, 2456]].map { |a| Hash[a] }
=&amp;gt; [{}, {}, {}, {}]
&lt;/pre&gt;

&lt;p&gt;In order to have the conversion working, the arguments must be ‘splatted’ with *, see e.g. &lt;a href=&quot;http://theplana.wordpress.com/2007/03/03/ruby-idioms-the-splat-operator/&quot;&gt;this discussion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, this means by splating the input values with Hash[*a] we get:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
signups = [[&quot;2011-08&quot;, 1433], [&quot;2011-09&quot;, 2972], [&quot;2011-10&quot;, 2480], [&quot;2011-11&quot;, 2456]].map { |a| Hash[*a] }
=&amp;gt; [{&quot;2011-08&quot;=&amp;gt;1433}, {&quot;2011-09&quot;=&amp;gt;2972}, {&quot;2011-10&quot;=&amp;gt;2480}, {&quot;2011-11&quot;=&amp;gt;2456}]
&lt;/pre&gt;

&lt;p&gt;Now we have an Array of Hashes for the signups (while we started with one Hash wrapped in an Array)
As I want some key in the collection that I could use later for grouping, let’s introduce a :signup symbol as key like this:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
signups.map { |h| h.map { |k, v| { k =&amp;gt; { signups: v }}}}.flatten
=&amp;gt; [{&quot;2011-08&quot;=&amp;gt;{:signups=&amp;gt;1433}}, {&quot;2011-09&quot;=&amp;gt;{:signups=&amp;gt;2972}}, {&quot;2011-10&quot;=&amp;gt;{:signups=&amp;gt;2480}}, {&quot;2011-11&quot;=&amp;gt;{:signups=&amp;gt;2456}}]
&lt;/pre&gt;

&lt;p&gt;Notice, there are two &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-map&quot;&gt;#map&lt;/a&gt; calls here: The first #map is about walking on the elements of an Array, while the second #map walks on the key and values of a Hash. For me, a common mistoke is trying to walk an Array with pair elements, while these are only available in the Hash #map.&lt;/p&gt;

&lt;p&gt;Let’s apply a the transformation so far also to our second collection, the logins collections with:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[&quot;2011-08&quot;=&amp;gt;2832, &quot;2011-09&quot;=&amp;gt;4172, &quot;2011-10&quot;=&amp;gt;3480, &quot;2011-11&quot;=&amp;gt;5456].first.to_a.map { |a| Hash[*a] }.map { |h| h.map { |k, v| { k =&amp;gt; { logins: v }}}}.flatten
=&amp;gt; [{&quot;2011-08&quot;=&amp;gt;{:logins=&amp;gt;2832}}, {&quot;2011-09&quot;=&amp;gt;{:logins=&amp;gt;4172}}, {&quot;2011-10&quot;=&amp;gt;{:logins=&amp;gt;3480}}, {&quot;2011-11&quot;=&amp;gt;{:logins=&amp;gt;5456}}]
&lt;/pre&gt;

&lt;h2 id=&quot;reduce-and-grouping&quot;&gt;Reduce and Grouping&lt;/h2&gt;
&lt;p&gt;The steps above were basically joining and expanding our collection that should now be reduced back to the final structure. To get this new, combined collection, let’s summarize the structure we have so far:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
signups = [{&quot;2011-08&quot;=&amp;gt;{:signups=&amp;gt;1433}}, {&quot;2011-09&quot;=&amp;gt;{:signups=&amp;gt;2972}}, {&quot;2011-10&quot;=&amp;gt;{:signups=&amp;gt;2480}}, {&quot;2011-11&quot;=&amp;gt;{:signups=&amp;gt;2456}}]
logins = [{&quot;2011-08&quot;=&amp;gt;{:logins=&amp;gt;2832}}, {&quot;2011-09&quot;=&amp;gt;{:logins=&amp;gt;4172}}, {&quot;2011-10&quot;=&amp;gt;{:logins=&amp;gt;3480}}, {&quot;2011-11&quot;=&amp;gt;{:logins=&amp;gt;5456}}]
&lt;/pre&gt;

&lt;p&gt;Before we are going to mix up the collections, let’s shortly review how #reduce works.&lt;/p&gt;

&lt;h3 id=&quot;reduce-or-inject&quot;&gt;Reduce (or Inject)&lt;/h3&gt;

&lt;p&gt;The methods #reduce and #inject do the same (they are aliased). The process is sometimes known as ‘folding’ a collection (see &lt;a href=&quot;http://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;wikipedia&lt;/a&gt;). Here are two observations I made:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reduce let apply operators in an Enumerable list:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[1,2,3].reduce(:+)
=&amp;gt; 6
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;The effect of Reduce is a bit like chaining method calls:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[{a: 1},{b:2}].reduce(:merge)
=&amp;gt; {:a=&amp;gt;1, :b=&amp;gt;2}
&lt;/pre&gt;

&lt;p&gt;This reminds me on {:a=&amp;gt;1}.merge({:b=&amp;gt;2}) that has the same outcome: {:a=&amp;gt;1, :b=&amp;gt;2}&lt;/p&gt;

&lt;p&gt;Inject is very handy to walk a list, and at the same time keep some notes in memory on the progress. Sometimes an additional step might be necessary, to apply folding, e.g. prepare the collection with &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-group_by&quot;&gt;#group_by&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;groupby&quot;&gt;Group_by&lt;/h3&gt;

&lt;p&gt;My observation on the #group_by method is that it allows to group data according to ‘meta-data’. Consider grouping a number of objects according to their class. For example:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[&quot;12&quot;, 12, &quot;patrick&quot;, Object.new].group_by(&amp;amp;:class)
=&amp;gt; {String=&amp;gt;[&quot;12&quot;, &quot;patrick&quot;], Fixnum=&amp;gt;[12], Object =&amp;gt; ...]}
&lt;/pre&gt;

&lt;p&gt;Now, we could also group this collection according to their String values like this:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[&quot;12&quot;, 12, &quot;patrick&quot;, Object.new].group_by(&amp;amp;:to_s)
=&amp;gt; {&quot;12&quot;=&amp;gt;[&quot;12&quot;, 12], &quot;patrick&quot;=&amp;gt;[&quot;patrick&quot;], Object:0x007f =&amp;gt;[...&amp;gt;]}
&lt;/pre&gt;

&lt;p&gt;The same data, different groupings. However, so far we can go ahead again with our signup and login collections, and apply some #inject calls.&lt;/p&gt;

&lt;h3 id=&quot;applying-inject&quot;&gt;Applying #inject&lt;/h3&gt;

&lt;p&gt;My first goal is to transform a structure as this:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[{ :a =&amp;gt; { :b =&amp;gt; 10 }}, { :a =&amp;gt; { :c =&amp;gt; 20 }}]
&lt;/pre&gt;

&lt;p&gt;into:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[{ :a =&amp;gt; { :b =&amp;gt; 10, :c =&amp;gt; 20 }}]
&lt;/pre&gt;

&lt;p&gt;This can be done with:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[{:a=&amp;gt;{:b=&amp;gt;10}}, {:a=&amp;gt;{:c=&amp;gt;20}}].map { |k| k.values }.flatten.reduce(:merge)
=&amp;gt; {:b=&amp;gt;10, :c=&amp;gt;20}
&lt;/pre&gt;

&lt;p&gt;The explanation: We reduce an Array of a nested Hash with the values from the start.&lt;/p&gt;

&lt;p&gt;Our next step is to remove the extra Hashes here:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[{ :a =&amp;gt; { :b =&amp;gt; 10, :c =&amp;gt; 20 }}, { :d =&amp;gt; { :b =&amp;gt; 10, :c =&amp;gt; 20 }}]
&lt;/pre&gt;

&lt;p&gt;This can be done with:
&amp;lt;pre style=&quot;font-size:11px&quot;&amp;gt;
[{ :a =&amp;gt; { :b =&amp;gt; 10, :c =&amp;gt; 20 }}, { :d =&amp;gt; { :b =&amp;gt; 10, :c =&amp;gt; 20 }}].reduce(:merge)
=&amp;gt; {:a=&amp;gt;{:b=&amp;gt;10, :c=&amp;gt;20}, :d=&amp;gt;{:b=&amp;gt;10, :c=&amp;gt;20}}
&amp;lt;/pre&amp;gt;&lt;/p&gt;

&lt;p&gt;Be careful: With a minor change the values from the first Hash are lost:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[{ :a =&amp;gt; { :b =&amp;gt; 10, :c =&amp;gt; 20 }}, { :a =&amp;gt; { :f =&amp;gt; 10, :d =&amp;gt; 20 }}].reduce(:merge)
=&amp;gt; {:a=&amp;gt;{:f=&amp;gt;10, :d=&amp;gt;20}}
&lt;/pre&gt;

&lt;p&gt;Note: The reason that the merge does not work as expected is, that a merge does not walk recursively into a nested Hash. To get the proper merge operation, we need to apply #inject with an empty hash as accumulator like this: &lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[{ :a =&amp;gt; { :b =&amp;gt; 10, :c =&amp;gt; 20 }}, { :a =&amp;gt; { :f =&amp;gt; 10, :d =&amp;gt; 20 }}].inject({}) {|o,h| o.merge!(h[:a]); o }
=&amp;gt; {:b=&amp;gt;10, :c=&amp;gt;20, :f=&amp;gt;10, :d=&amp;gt;20}
&lt;/pre&gt;

&lt;p&gt;Now, a similar transformation can be applied to my joined signup and login collection. First, let’s combine the collections:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
[logins, signups].flatten.group_by { |a| a.keys.first }
=&amp;gt; {&quot;2011-08&quot;=&amp;gt;[{&quot;2011-08&quot;=&amp;gt;{:logins=&amp;gt;2832}}, {&quot;2011-08&quot;=&amp;gt;{:signups=&amp;gt;1433}}], &quot;2011-09&quot;=&amp;gt;[{&quot;2011-09&quot;=&amp;gt;{:logins=&amp;gt;4172}}, {&quot;2011-09&quot;=&amp;gt;{:signups=&amp;gt;2972}}], &quot;2011-10&quot;=&amp;gt;[{&quot;2011-10&quot;=&amp;gt;{:logins=&amp;gt;3480}}, {&quot;2011-10&quot;=&amp;gt;{:signups=&amp;gt;2480}}], &quot;2011-11&quot;=&amp;gt;[{&quot;2011-11&quot;=&amp;gt;{:logins=&amp;gt;5456}}, {&quot;2011-11&quot;=&amp;gt;{:signups=&amp;gt;2456}}]}
&lt;/pre&gt;

&lt;p&gt;Now, let’s reduce the set to the basics:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
login_signups = [logins, signups].flatten.inject({}) { |h,v| h[v.keys.first] ||= []; h[v.keys.first] &amp;lt;&amp;lt; v.values; puts v.inspect; h}
{&quot;2011-08&quot;=&amp;gt;{:logins=&amp;gt;2832}}
{&quot;2011-09&quot;=&amp;gt;{:logins=&amp;gt;4172}}
{&quot;2011-10&quot;=&amp;gt;{:logins=&amp;gt;3480}}
{&quot;2011-11&quot;=&amp;gt;{:logins=&amp;gt;5456}}
{&quot;2011-08&quot;=&amp;gt;{:signups=&amp;gt;1433}}
{&quot;2011-09&quot;=&amp;gt;{:signups=&amp;gt;2972}}
{&quot;2011-10&quot;=&amp;gt;{:signups=&amp;gt;2480}}
{&quot;2011-11&quot;=&amp;gt;{:signups=&amp;gt;2456}}
=&amp;gt; {&quot;2011-08&quot;=&amp;gt;[[{:logins=&amp;gt;2832}], [{:signups=&amp;gt;1433}]], &quot;2011-09&quot;=&amp;gt;[[{:logins=&amp;gt;4172}], [{:signups=&amp;gt;2972}]], &quot;2011-10&quot;=&amp;gt;[[{:logins=&amp;gt;3480}], [{:signups=&amp;gt;2480}]], &quot;2011-11&quot;=&amp;gt;[[{:logins=&amp;gt;5456}], [{:signups=&amp;gt;2456}]]}
&lt;/pre&gt;

&lt;p&gt;Now, we are almost there. Let’s clean up the combined hashes and arrays within the date keys:&lt;/p&gt;

&lt;pre style=&quot;font-size:11px&quot;&gt;
activities = login_signups.map { |m| {m.first =&amp;gt; m.last.flatten.inject(:merge)} }=&amp;gt; [{&quot;2011-08&quot;=&amp;gt;{:logins=&amp;gt;2832, :signups=&amp;gt;1433}}, {&quot;2011-09&quot;=&amp;gt;{:logins=&amp;gt;4172, :signups=&amp;gt;2972}}, {&quot;2011-10&quot;=&amp;gt;{:logins=&amp;gt;3480, :signups=&amp;gt;2480}}, {&quot;2011-11&quot;=&amp;gt;{:logins=&amp;gt;5456, :signups=&amp;gt;2456}}]
=&amp;gt; [{&quot;2011-08&quot;=&amp;gt;{:logins=&amp;gt;2832, :signups=&amp;gt;1433}}, {&quot;2011-09&quot;=&amp;gt;{:logins=&amp;gt;4172, :signups=&amp;gt;2972}}, {&quot;2011-10&quot;=&amp;gt;{:logins=&amp;gt;3480, :signups=&amp;gt;2480}}, {&quot;2011-11&quot;=&amp;gt;{:logins=&amp;gt;5456, :signups=&amp;gt;2456}}]
&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;My conclusion of this post are the following:
* Transforming nested collections is funcitonal programming, and it certainly takes practice. I would be curious to see/hear how you approach this kind of problems with your steps, or maybe in another programming language. Let me know what you think.
* A lot of transformation can be approached with standard Array methods like ‘each’ and ‘map’; however they are sometimes not optimal, and in a way are limited to ‘simple’ transformation only.
* Redis as key-value store provides commands for Hash, List and Set operations; maybe getting a better understanding of the effects in Ruby helps you becoming a better data engineer too.
* I didn’t use #group_by; although it is very helpful in a collections with more keys, e.g. see this discussion on &lt;a href=&quot;http://stackoverflow.com/questions/14776686/ruby-transformation-to-merge-an-array-of-hashes-into-another-array-of-hash&quot;&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Logging in Rack middleware with Clogger</title>
   <link href="http://mulderp.github.com/log-requests-with-rack-middleware-and-clogger"/>
   <updated>2013-02-05T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/log-requests-with-rack-middleware-and-clogger</id>
   <content type="html">&lt;p&gt;Thanks to Rack middleware and &lt;a href=&quot;http://api.rubyonrails.org/files/railties/lib/rails/engine_rb.html&quot;&gt;Rails engines&lt;/a&gt;, it is possible to easily combine web application modules in Ruby. Good examples of this pattern are the &lt;a href=&quot;https://github.com/spree/spree&quot;&gt;Spree engine&lt;/a&gt; or some chapters of Josè Valim’s book &lt;a href=&quot;http://plataformatec.com.br/crafting-rails-applications&quot;&gt;“Crafting Rails Applications”&lt;/a&gt;. In the context of the design of &lt;a href=&quot;http://thinkingonthinking.com/what-is-modular-architecture/&quot;&gt;modular web applications&lt;/a&gt;, I found logging specifics of HTTP requests with &lt;a href=&quot;http://clogger.rubyforge.org/&quot;&gt;Clogger&lt;/a&gt; very helpful.&lt;/p&gt;

&lt;h2 id=&quot;what-is-clogger&quot;&gt;What is Clogger?&lt;/h2&gt;
&lt;p&gt;The main function of Clogger is to print and format parameters in a &lt;a href=&quot;http://rack.rubyforge.org/doc/Rack/Request.html&quot;&gt;Rack::Request&lt;/a&gt;. It’s a bit like ‘sprintf’ for HTTP requests, and can be mounted as middleware in a Rack application. So far, I mainly used the logger with Sinatra or in Rails application. Here are 2 examples:&lt;/p&gt;

&lt;h2 id=&quot;logging-http-headers-in-a-rails-application&quot;&gt;Logging HTTP headers in a Rails application&lt;/h2&gt;
&lt;p&gt;Authentication over the web can be tricky. For development purposes, it’s often helpful to see some more details of a HTTP header. For this, let’s write a simple client sending some header tokens to a Rails app.&lt;/p&gt;

&lt;p&gt;The client:&lt;/p&gt;

&lt;pre&gt;
require 'faraday'
client = Faraday::Connection.new(:url =&amp;gt; &quot;http://0.0.0.0:3000/&quot;)
client.get '/example' do |req|
  req.headers['x_token'] = 'some meta data'
end
&lt;/pre&gt;

&lt;p&gt;The Clogger setup in a Rails server config/application.rb:&lt;/p&gt;

&lt;pre style=&quot;font-size:10px&quot;&gt;
class Application &amp;lt; Rails::Application
  config.middleware.use Clogger, :format =&amp;gt; '&quot;$request&quot; ? $query_string $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; $request_time -- $http_x_token', :logger =&amp;gt; $stdout 
end
&lt;/pre&gt;

&lt;p&gt;Results in:&lt;/p&gt;

&lt;pre&gt;
  &quot;GET http://0.0.0.0:3000/profiles HTTP/1.1&quot; ?  200 1083 &quot;-&quot; &quot;Ruby&quot; 0.502 -- some meta data
&lt;/pre&gt;

&lt;h2 id=&quot;monitoring-cookies-in-sinatra&quot;&gt;Monitoring cookies in Sinatra&lt;/h2&gt;
&lt;p&gt;A similar logging setup can easily be done in Sinatra. Simply include Clogger in config.ru&lt;/p&gt;

&lt;pre&gt;
require 'clogger'

use Clogger, :format =&amp;gt; '&quot;$request&quot; ?$query_string $status &quot;$http_cookie&quot; $request_time $http_host', :logger =&amp;gt; $stdout
&lt;/pre&gt;

&lt;p&gt;Now the cookies are dumped for every request. This can be helpful for debugging once in a while.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The take away from this post is that the Rack middleware can be a nice tool for debugging HTTP header content. Rack can bring modular code back to a web application, and this is great to create ‘layers’ of functionality upon which other applications can build on. A similar approach was derived in the Faraday stack to write &lt;a href=&quot;http://adventuresincoding.com/2010/09/writing-modular-http-client-code-with-faraday/&quot;&gt;modular client-side middleware&lt;/a&gt;, and will may be discussed in a later post.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>A Vagrant based Minimum Viable Webserver</title>
   <link href="http://mulderp.github.com/minimum-nginx-node-with-librarian-chef"/>
   <updated>2013-02-01T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/minimum-nginx-node-with-librarian-chef</id>
   <content type="html">&lt;p&gt;When developing servers or clients that talk HTTP, it’s great to have mock systems that are as close as possible to a live system. Here is a quick hack to make a minimum viable webserver by using Chef-Solo and &lt;a href=&quot;https://github.com/applicationsonline/librarian&quot;&gt;Librarian-Chef&lt;/a&gt;. Librarian-Chef is conceptually very close to the Ruby Bundler gem.&lt;/p&gt;

&lt;h2 id=&quot;install-librarian-chef&quot;&gt;Install librarian-chef&lt;/h2&gt;

&lt;pre&gt;
   $ gem install librarian
&lt;/pre&gt;

&lt;h2 id=&quot;init-librarian-chef&quot;&gt;Init librarian-chef&lt;/h2&gt;

&lt;p&gt;To get started, we need a file where we can specifiy a node’s cookbooks:&lt;/p&gt;

&lt;pre&gt;
   $ librarian-chef init
&lt;/pre&gt;

&lt;p&gt;This gives us the ‘Cheffile’, which is conceptually close to Bundler’s ‘Gemfile’.&lt;/p&gt;

&lt;h2 id=&quot;edit-cheffile&quot;&gt;Edit Cheffile&lt;/h2&gt;

&lt;p&gt;We are going to modify the Cheffile to define our node’s dependencies as follows:&lt;/p&gt;

&lt;pre&gt;
#!/usr/bin/env ruby
#^syntax detection

site 'http://community.opscode.com/api/v1'

cookbook 'nginx-app', :path =&amp;gt; &quot;./application-cookbooks&quot;
&lt;/pre&gt;

&lt;p&gt;This means we are going to write a small application cookbook ‘nginx-app’ that lives in the path ‘/application-cookbooks’&lt;/p&gt;

&lt;h2 id=&quot;create-the-application-cookbook&quot;&gt;Create the application cookbook&lt;/h2&gt;

&lt;p&gt;In contrast to cookbooks for infrastructure, application cookbooks are adjustments and setups for node specific stuff. Some background on this can be found &lt;a href=&quot;http://devopsanywhere.blogspot.de/2012/11/how-to-write-reusable-chef-cookbooks.html&quot;&gt;here&lt;/a&gt; They are derived from e.g. community cookbooks, but contain custom stuff. So, let’s create an application cookbook for our webserver:&lt;/p&gt;

&lt;pre&gt;
    knife cookbook create nginx-app -o application-cookbooks
&lt;/pre&gt;

&lt;p&gt;(Eventually, you need to have knife-solo on your system to get this command to work)&lt;/p&gt;

&lt;p&gt;This should give something like:&lt;/p&gt;

&lt;pre&gt;
  application-cookbooks
   |-nginx-app
   |---attributes
   |---definitions
   |---files
   |-----default
   |---libraries
   |---providers
   |---recipes
   |---resources
   |---templates
   |-----default
&lt;/pre&gt;

&lt;h2 id=&quot;setup-the-webservers-resources&quot;&gt;Setup the webserver’s resources&lt;/h2&gt;

&lt;p&gt;Nginx can be installed with a simple &lt;a href=&quot;http://wiki.opscode.com/display/chef/Resources#Resources-Package&quot;&gt;package resource&lt;/a&gt;. This is an abstraction around a package installer such as aptitude or yum. Also we need to use a template resource for defining a virtual host:&lt;/p&gt;

&lt;h3 id=&quot;recipe-in-nginx-apprecipesdefaultrb&quot;&gt;Recipe in /nginx-app/recipes/default.rb&lt;/h3&gt;

&lt;pre&gt;
   package &quot;nginx&quot;
   
   service &quot;nginx&quot; do
     supports :status =&amp;gt; true, :restart =&amp;gt; true, :reload =&amp;gt; true
     action [:enable, :start]
   end
   
   template &quot;/etc/nginx/nginx.conf&quot; do
     notifies :reload, &quot;service[nginx]&quot;
   end
&lt;/pre&gt;

&lt;h3 id=&quot;template-in-nginx-apptemplatesnginxconferb&quot;&gt;Template in /nginx-app/templates/nginx.conf.erb&lt;/h3&gt;
&lt;pre&gt;
  user www-data;
  worker_processes  &amp;lt;%= @node[:nginx][:worker_processes] %&amp;gt;;
  
  error_log  /var/log/nginx/error.log;
  pid        /var/run/nginx.pid;
  
  events {
      worker_connections  1024;
      # multi_accept on;
  }
  
  http {
      include       /etc/nginx/mime.types;
  
      access_log	/var/log/nginx/access.log;
  
      sendfile        on;
      #tcp_nopush     on;
  
      keepalive_timeout  5;
      tcp_nodelay        on;
  
      gzip  on;
      gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;
  
      include /etc/nginx/conf.d/*.conf;
      include /etc/nginx/sites-enabled/*;
  }

&lt;/pre&gt;

&lt;p&gt;We use an attribute above for the worker, so we also need to define that variable:&lt;/p&gt;

&lt;pre&gt;
  default[:nginx][:dir] = &quot;/etc/nginx&quot;
  default[:nginx][:worker_processes] = 4
&lt;/pre&gt;

&lt;h2 id=&quot;bundle-the-cookbooks&quot;&gt;Bundle the cookbooks&lt;/h2&gt;

&lt;p&gt;Now, we have everything in place and we can bundle the cookbooks with the command:&lt;/p&gt;

&lt;pre&gt;
    $ librarian-chef install
&lt;/pre&gt;

&lt;p&gt;Now all cookbooks are downloaded an placed into the local /cookbooks path. Two outputs can be observed, the dependencies were written into Cheffile.lock&lt;/p&gt;

&lt;pre&gt;
SITE
  remote: http://community.opscode.com/api/v1
  specs:
    build-essential (1.3.2)
    nginx (1.2.0)
      build-essential (&amp;gt;= 0.0.0)
      ohai (&amp;gt;= 1.1.4)
    ohai (1.1.6)

PATH
  remote: ./application-cookbooks
  specs:
    nginx-app (0.1.0)
      nginx (&amp;gt;= 0.0.0)

DEPENDENCIES
  nginx-app (&amp;gt;= 0
&lt;/pre&gt;

&lt;p&gt;This shows that our node get some additional cookbooks that are required by the nginx-app cookbook.
Let’s also look at the cookbook path:&lt;/p&gt;

&lt;pre&gt;
   cookbooks
   |-build-essential
   |---attributes
   |---recipes
   |-nginx
   |---attributes
   |---definitions
   |---files
   |-----default
   |-------tests
   |---------minitest
   |-----------support
   |---recipes
   |---templates
   |-----debian
   |-----default
   |-------modules
   |-------plugins
   |-----gentoo
   |-----ubuntu
   |-nginx-app
   |---attributes
   |---definitions
   |---files
   |-----default
   |---libraries
   |---providers
   |---recipes
   |---resources
   |---templates
   |-----default
   |-ohai
   |---attributes
   |---files
   |-----default
   |-------plugins
   |---recipes
&lt;/pre&gt;

&lt;p&gt;As we can see, all cookbooks were bundled.&lt;/p&gt;

&lt;h2 id=&quot;setup-vagrant&quot;&gt;Setup Vagrant&lt;/h2&gt;
&lt;p&gt;Now, we have all things in place to provision the web server. It’s time to setup Vagrant:&lt;/p&gt;

&lt;pre&gt;
    $ vagrant init Ubuntu-11.04
&lt;/pre&gt;

&lt;p&gt;Edit the Vagrantfile:&lt;/p&gt;
&lt;pre&gt;

&lt;pre&gt;
Vagrant::Config.run do |config|
  config.vm.box = &quot;Ubuntu-11.04&quot;
  config.vm.network :hostonly, &quot;192.168.33.10&quot;
  config.vm.forward_port 80, 8080
  config.vm.forward_port 9292, 9292

  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = &quot;./cookbooks&quot;
    chef.add_recipe &quot;nginx-app&quot;
  end
end
&lt;/pre&gt;

And provision:
&lt;pre&gt;
  $ vagrant up
&lt;/pre&gt;

So, that's all to get the webserver running. Now, it would be cool to get some basic Ruby/Rack interface running too. Maybe in the next post with the help of a unicorn cookbook.
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Building a Vagrant base box</title>
   <link href="http://mulderp.github.com/building-a-Vagrant-base-box"/>
   <updated>2013-01-31T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/building-a-Vagrant-base-box</id>
   <content type="html">&lt;p&gt;As explained in my previous &lt;a href=&quot;http://thinkingonthinking.com/building-infrastructure&quot;&gt;post&lt;/a&gt;, Chef allows to develop, test and experiment with computing or cloud infrastructure.&lt;/p&gt;

&lt;p&gt;In order to locally build nodes to test the setup of a node, &lt;a href=&quot;http://vagrantup.com&quot;&gt;Vagrant&lt;/a&gt; is a great automation tool that helps to play with ISO images from a certain operating system. There is a list of ISO images ready for Chef here at &lt;a href=&quot;http://vagrantbox.es&quot;&gt;Vagrantbox.es&lt;/a&gt;. However, a common use case is, that you are running some other Linux version already, or, you want to work with fresh Ubuntu image, that you know what it contains.&lt;/p&gt;

&lt;p&gt;So, how to create a new Vagrant basebox?&lt;/p&gt;

&lt;p&gt;Here are some steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Upgrade your VirtualBox to the latest Version; as time of writing this was 4.2.6. This gives you less headache when Vagrant is downloading so called ISO image additions (see e.g. TimeOut issue &lt;a href=&quot;https://github.com/jedi4ever/veewee/issues/519&quot;&gt;here&lt;/a&gt; )&lt;/li&gt;
  &lt;li&gt;Make sure you have the gems VeeWee and Vagrant installed:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
     gem install vagrant
     gem install veewee
&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;Now, You’ll want to get a list with possible ISO images for baseboxes. This command list baseboxes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
    vagrant basebox templates
&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;As you’ll see in the list you have quite a lot of options. Do a:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
     vagrant basebox define Ubuntu-11.04 ubuntu-11.04-server-amd64 -d
&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;Check/Edit the definition of the base box. In my case I had to change the pointer to the ISO image in:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
    ubuntu-base/definitions/Ubuntu-11.04/definition.rb
&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;Start the build of the basebox:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
     vagrant basebox build Ubuntu-11.04
&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;Export the basebox:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
   vagrant basebox export Ubuntu-11.04
&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;Add the basebox:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
   vagrant box add 'Ubuntu-11.04' 'Ubuntu-11.04.box'
&lt;/pre&gt;

&lt;p&gt;That’s basically it. Thanks to &lt;a href=&quot;http://zac.sprackett.com/resume/&quot;&gt;Zac Sprackett&lt;/a&gt; for writing on setting up a CentOS basebox  &lt;a href=&quot;http://devops.me/2011/10/06/building-baseboxes/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building Infrastructure with Chef</title>
   <link href="http://mulderp.github.com/building-infrastructure"/>
   <updated>2013-01-29T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/building-infrastructure</id>
   <content type="html">&lt;p&gt;Chef is a configuration tool for computing infrastructure, especially cloud infrastructure and helps to share infrastructure across projects, teams and products. What I like best on the Chef concept is, that it enables experiments with infrastucture, something wich otherwise would be costly or pointless, since building software and servers is often more of an art, as a science. For example, I remember browsing through a multitude of discussions in forum posts like “oh, I had to patch the lib-whatever header to make it work with version 3.2.x, not sure if this will work for version 3.1.y too”. So, in some senses, Chef is bringing defaults and shared efforts to infrastructure, similary to what Rails brought to building database driven web applications.&lt;/p&gt;

&lt;p&gt;As in most other successful open-source projects, Chef is heavily community driven in &lt;a href=&quot;http://lists.opscode.com/&quot;&gt;mailing lists&lt;/a&gt;, github repositories, &lt;a href=&quot;http://wiki.opscode.com&quot;&gt;a wiki&lt;/a&gt; and a vibrant IRC channel (#chef). I was very lucky to get in contact with &lt;a href=&quot;http://nathenharvey.com&quot;&gt;Nathen Harvey&lt;/a&gt;, who helped me a lot in understanding the basic configuration terminology that comes with Chef. Over the last months, we were able to discuss the basic steps to build servers from scratch (basically simple steps in “cooking” servers)&lt;/p&gt;

&lt;p&gt;So, what did I learn so far?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One of my most important insights so far is, that there is no ‘single’ Chef unlike a ‘single’ Rails for making web applications. What I mean is, that Chef comes in at least 2 flavors: Chef-Solo and Chef-Client (= Hosted-Chef/Chef-Server). Nathen discusses the basic difference between Chef-Solo and Chef-Server &lt;a href=&quot;http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/&quot;&gt;here&lt;/a&gt;. Now, some weeks later, my conclusion is that Chef-Solo is about managing a single node (sometimes for development purposes), whereas chef-server is closer to a multi-node, cluster-like server environment. Duh.. now it sounds logical, but in fact, it was rather confusing when I started learning Chef.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chef-server comes with “knife”, a powerful command-line tool that helps in all kinds of steps for server configuration. Knife is that kind of tool that you start thinking of first, when creating/updating/extracing server build steps. Chef-Solo does not support knife as far as I know, but can easily be used together with hacks in a &lt;a href=&quot;http://docs.vagrantup.com/v1/docs/provisioners/chef_solo.html&quot;&gt;Vagrantfile&lt;/a&gt; or tools such as librarian-chef or berkshelf. Unfortunately, I haven’t played too much with those yet, although I wrote about an experiment with librarian-chef and Neo4J &lt;a href=&quot;http://thinkingonthinking.com/An-experiment-with-Vagrant-and-Neo4J/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Server build steps are abstracted away in “cookbooks”. A cookbook is a bit similar to what a Gem is in a Ruby-on-Rails project. In fact, you can quickly get some server software running, just by including the cookbook, similar to a including e.g. a gem for authentication in Rails. However, as a single gem in a Rails project doesn’t make much sense, cookbooks are more powerful when coming in a bundle. So, a server is defined in terms of recipes in a cookbook, and it’s actually the “run_list” that tells Chef how a server should be built (or cooked).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, that is a summary of my Chef learnings so far. There are more insights related to how cookbooks work, how run lists can be simplified, and how bugs in cookbooks can be dealt with (tip: look in the github issues of a cookbook). &lt;/p&gt;

&lt;p&gt;In the meanwhile, I was able to work with cookbooks for a basic setup of Postgres and ArangoDB. And today, I just launched a basic web server instance on Amazon-EC2 with just a simple knife command. &lt;/p&gt;

&lt;p&gt;Last but not lwast, I got connected to some more DevOps, such as &lt;a href=&quot;https://github.com/jbianquetti&quot;&gt;Jorge Bianquetti&lt;/a&gt; who helped with librarian-chef and Cassiano Leal with whom I discussed &lt;a href=&quot;https://github.com/cassianoleal/vagrant-butcher/issues/3&quot;&gt;Vagrant-Butcher&lt;/a&gt;. Also, &lt;a href=&quot;http://mlafeldt.github.com/blog/2012/09/learning-chef/&quot;&gt;Mathias Lafeldt&lt;/a&gt; has some great discussions on his experiences on #learningchef. That’s all for now, looking forward to hear your feeedback, your insights, discoveries and problems with infrastructure automation. If you want to get more details on &lt;a href=&quot;http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/&quot;&gt;learning-chef&lt;/a&gt; check out the blog of &lt;a href=&quot;http://nathenharvey.com&quot;&gt;Nathen Harvey&lt;/a&gt; too.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>What is modular code?</title>
   <link href="http://mulderp.github.com/what-is-modular-architecture"/>
   <updated>2013-01-26T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/what-is-modular-architecture</id>
   <content type="html">&lt;p&gt;Designing the architecture of a web application is difficult. First, there are many different programming languages among which to chose, then there are many frameworks , some leave design decisions to the programmer, some come “opinionated’ (= with default settings/strategies). Additionally, within each framework, a number of plugins exists that often solve similar problems, yet have different solution approaches.&lt;/p&gt;

&lt;p&gt;In order to help application designers to make decisions, programmers talk about applying “patterns” or using a “pattern language”. Patterns give some heuristics, whether a system composition makes sense, or will be risky in the future. In my view, a number of patterns are driven by making code and systems modular, a concept that I read in &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-Oriented_Software_Construction&quot;&gt;this book&lt;/a&gt; some years ago. Modular code (and data) should be easier to re-use, and allows to extend and adapt ideas where needed. &lt;/p&gt;

&lt;p&gt;One of the most important pattern in a web application is called Model-View-Controller (MVC). A nice background discussion by Trygve Reenskaug (who discovered the MVC pattern in the 1970ies) can be found &lt;a href=&quot;https://groups.google.com/group/object-composition/msg/b9366f3bc78a33f8&quot;&gt;here&lt;/a&gt;, I will use the following definitions for MVC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model: All data items are representations of the real things; they make up the Model. &lt;/li&gt;
  &lt;li&gt;View: A View is componenent that transforms a model into something visible. A View is both input and output. A View is also a filter showing the interesting parts only [to a user].&lt;/li&gt;
  &lt;li&gt;Controller: The Controller sets up and coordinates one or more Views. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, in the context of (mobile) web applications, where views are living in (mobile) browsers that require a lot JavaScript, new design decisions for an application arise. Here are 2 questions that would impact the application design: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;how-do-we-serve-views-to-a-client&quot;&gt;How do we serve “views” to a client?&lt;/h2&gt;
    &lt;p&gt;As long as a MVC stack lives on a server (e.g. a standard Rails application), this question is easy to answer. Views can easily access model instances, and the rendered views can be served from server to clients.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a mobile context however, the view rendering might happen on the client-side for efficiency. Or, in the context of a single-page application, views are only partially updated as needed. These designs require servers to prepare assets for clients, and new tool-chains are becoming popular. I wrote about some experiences of working with new tools for asset management &lt;a href=&quot;http://thinkingonthinking.com/MVC-and-Rails-API/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, for serving frontends assets, no full application stack is needed. And since my programming background the last year was mainly in Ruby, I have been looking into serving assets with Sinatra and authenticating HTTP requests with Rack. Other basic assets servers, such as Express.JS and other Node.JS approaches might be interesting to look at too.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;how-to-organize-mvc-modules-on-the-client&quot;&gt;How to organize “MVC” modules on the client?&lt;/h2&gt;
    &lt;p&gt;When working with MVC on the client, new decisions might be needed on how to organize an MVC structure. E.g. with Backbone, views are logic for state, events and accessing models, together with templates that help in rendering data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additionally, there might be multiple MVC’s defined on a client, depending on the current scope of a HTTP conversation (e.g. /protected or /guest or /admin).&lt;/p&gt;

&lt;p&gt;So, far in Backbone, my application structure starts to look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/dashboard
  app.js
  main.js
  
  /collections
  /models
  /views
  /templates

/welcome
  app.js
  main.js
  
  /collections
  /models
  /views
  /templates
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>How I am (re-)discovering working with JavaScript</title>
   <link href="http://mulderp.github.com/how-I-start-liking-javascript-again"/>
   <updated>2013-01-23T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/how-I-start-liking-javascript-again</id>
   <content type="html">&lt;p&gt;Having programmed in Assembler, C/C++, Java and in Ruby, I was always confused on how people are doing stuff in JavaScript - until recently luckily. In imperative languages, you learn to think about how to ‘control’ data; in JavaScript however, you think about this: What are your data structures (DOM/HTML/API resources)? And, how do changes in data structures look like?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As a start, the &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON syntax&lt;/a&gt;, which is used everywhere in JavaScript, forces you to think about embedding and grouping values in data structures. Showing a resource in JSON can easily give feedback, if your data contains garbage (or not). And additionally, JSON in JavaScript code allows you to easily access attributes and properties. E.g. compare:&lt;/p&gt;

    &lt;p&gt;activity.friday.noon in JavaScript vs activity[:friday][:noon] in Ruby.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, the &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore.js&lt;/a&gt; library brings a lot of Ruby-like syntactic sugar into working with JavaScript. Especially, it helps you to hide nasty, dynamic loops, that would require you to use incrementors (e.g. for (i = 0; … ) ) or suddenly break a loop. Underscore.js gives a lot of nice, little tools to work with lists and functions. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your data structures can contain (anonymous) functions (= lambdas). This is great if you want to override default values with small computations when needed. Especially, using anonymous functions as properties is the core to understand how e.g. &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; enables a model-view-controller pattern (which is a rather complex topic, see &lt;a href=&quot;http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/&quot;&gt;http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/&lt;/a&gt;) &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Composition of functions is very easy with a library such as &lt;a href=&quot;http://requirejs.org/&quot;&gt;requirejs&lt;/a&gt;. This reminds me a bit on the concept of dependency injection, which in other languages is rather difficult to achieve (at least without getting lost). Anyway, there is also some discussion whether requiring JavaScript code with requirejs is actually &lt;a href=&quot;http://stackoverflow.com/questions/7708194/dependency-injection-with-requirejs&quot;&gt;injecting dependencies&lt;/a&gt;. Still, my experiments so far yield very, very modular code, something I like very much (getting out of the spaghetti code hell)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What are your experiences with JavaScript compared to other languages?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New kid on the Blog</title>
   <link href="http://mulderp.github.com/new-kid-on-the-blog"/>
   <updated>2013-01-18T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/new-kid-on-the-blog</id>
   <content type="html">&lt;p&gt;The more I am getting into Ruby and Rails development, the more I experience that blogs help, inspire, connect, do business. So, it’s getting time to redefine my voice in the web, share memes on programming and web evolution. Maybe this post might inspire you or is helpful to you. Here is what inspired me and helped me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First, my motivation to share ideas in a blog was re-energized by meeting bloggers on conferences (BaRuCo, RuPy) and in the web, e.g. some include posts on Chef by &lt;a href=&quot;http://nathenharvey.com&quot;&gt;Nathen Harvey&lt;/a&gt;, Rails posts by &lt;a href=&quot;http://words.steveklabnik.com/&quot;&gt;Steve Klabnik&lt;/a&gt;, BDD posts by &lt;a href=&quot;http://blog.mattwynne.net/&quot;&gt;Matt Wynne&lt;/a&gt;, &lt;a href=&quot;http://businessmodelalchemist.com&quot;&gt;Alex Osterwalder&lt;/a&gt; on redefining business strategy, and last but not leasts product/software/devop posts by &lt;a href=&quot;http://svn.37signals.com&quot;&gt;37signals&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I restarted my blogging activities on blogger some weeks ago, I came across an article by &lt;a href=&quot;http://al3x.net/about.html&quot;&gt;Alex Payne&lt;/a&gt;, on how he ended up on hosting his blog on github pages. My last blogging activities were based on blogger.com; but programmers like editors, source control, and control of details in layouts and JavaScript interaction. So, time to say goodbye to blogger.com&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Somehow, I was reminded that in the &lt;a href=&quot;http://shop.oreilly.com/product/0636920019664.do&quot;&gt;Sinatra book&lt;/a&gt; by Konstantin Haase some Git/Sinatra workflow for blogging was mentioned. I tried this workflow, but Sinatra support on Github pages seems not to be the cutting edge. (If someone knows why, let me know). So, the cutting edge is &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, a static site generator that “transforms your text into a monster”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily, it took not much, to let Jekyll render the words you are reading here, from my editor to your web browser, because of 2 great web resources:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Jekyll parent blog of this blog came from &lt;a href=&quot;https://github.com/Sirupsen/sirupsen.github.com&quot;&gt;Sirupsen&lt;/a&gt;, who has put together a lot of nice design details into his templates.&lt;/li&gt;
  &lt;li&gt;A small overview on how to add all kinds of widgets to your blog, such as comments, Twitter links, and more: &lt;a href=&quot;http://erjjones.github.com/blog/How-I-built-my-blog-in-one-day/&quot;&gt;http://erjjones.github.com/blog/How-I-built-my-blog-in-one-day/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, let me know what you think! I am happy to find out more about you readers, how you came hear, what you find helpful, when you read this. That’s all for now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DOM feedback with JavaScript Jasmine</title>
   <link href="http://mulderp.github.com/DOM-feedback-with-JavaScript-Jasmine"/>
   <updated>2012-12-18T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/DOM-feedback-with-JavaScript-Jasmine</id>
   <content type="html">&lt;p&gt;In my first attempts to develop frontend interactions with Backbone.js, I discovered some blind spots in my understanding of Backbone views. Especially, I find the different options to organize views with parent and child-views, as well as attaching views to DOM nodes difficult. A nice overview on Backbone pitfalls is given &lt;a href=&quot;http://blog.8thlight.com/cymen-vig/2012/12/13/reflections-on-using-backbone-js.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As in many programming matters, thinking about outcomes and tests can help to write better code. This is where &lt;a href=&quot;http://jasminejs.org/&quot;&gt;Jasmine&lt;/a&gt; can help in the development of Backbone applications.&lt;/p&gt;

&lt;p&gt;First, there are several options to run Jasmine:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The most common option for running Jasmine specs is by having your default web browser loading a test DOM (from e.g. spec/index.html or spec/SpecRunner.html). Within this option you can declare a number of JavaScript dependencies that contain the actual specs, and that will be executed as soon as the Jasmine execution is triggered (with jasmine.getEnv().execute(); ).
Another option is to run Jasmine specs through rake. This option seems to be very popular in the Rails community; but as I am thinking more towards development of stand-alone frontend applications, I don’t want to have a tight Rails coupling. I could not get rake jasmine to render my specs from the Backbone setup; so, I will postpone this approach for a while. Maybe someone of you has made some more successful experiments?&lt;/li&gt;
  &lt;li&gt;Another interesting attempt to get feedback from the DOM is to run Jasmine through a headless browser. PhantomJS comes naturally to mind in this context, and some interesting article is &lt;a href=&quot;http://blog.jphpsf.com/2012/10/31/running-Jasmine-tests-with-Phantom-js-or-Webdriver/http://obtiva.com/blog/112-javascript-specs-with-jasmine-a-primer-for-rubyists-part-1&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a first step to testing a Backbone application, I wanted to test some basic Backbone view properties. Now, one of the difficulties that I found was, how to actually load all dependencies into a browser with SpecRunner.html including RequireJS; and, execute some specs.&lt;/p&gt;

&lt;p&gt;I found two approaches that work for me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;global-declaration-of-backbone-dependencies&quot;&gt;Global declaration of backbone dependencies&lt;/h2&gt;

    &lt;script type=&quot;text/javascript&quot; src=&quot;../public/js/libs/jquery/jquery.js&quot;&gt;

&lt;/script&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;References to JQuery, Underscore and BackboneJS can be declared in a global way in the SpecRunner.html as follows:
* This should give access to the Backbone library where you need them. It works good enough, but maybe it’s useful to load your dependencies more in a dynamic way if your application grows. For this, the next option might be more interesting.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;loading-backbone-dependencies-with-requirejs&quot;&gt;Loading Backbone dependencies with RequireJS&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When using several dependencies (including custom views, collections, routers, etc.), requiring every module in the global scope of SpecRunner.html might result into increased editing efforts. Here is an attempt to re-use some module definitions with requirejs that could in principle be shared between your tests and the real application.&lt;/p&gt;

&lt;p&gt;First, to load dependencies with requirejs, the following lines are needed in the specrunner.html&lt;/p&gt;

&lt;p&gt;The first line refers to the jasmine-require project by Scott Burch that helps to require dependencies from within specs. Some example how this can be used with a JavaScript framework is shown here from the Pattern JS project.&lt;/p&gt;

&lt;p&gt;With Backbone this might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  requireDependencies([&quot;underscore&quot;, &quot;backbone&quot;], function(_, Backbone) {
    View = Backbone.View.extend({tagName: &quot;li&quot; });
    view = new View();
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;other-approaches&quot;&gt;Other approaches&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another option to load dependencies with requirejs was described in &lt;a href=&quot;https://groups.google.com/forum/?hl=en_US&amp;amp;fromgroups=#!searchin/jasmine-js/requireJS/jasmine-js/7HJYbi705PE/XkpLR2DwQ0sJ&quot;&gt;this discussion&lt;/a&gt; in the Jasmine user group by using  testr.js However, I did not understand yet, how this is better than the previous option. (Maybe someone wants to comment?)&lt;/p&gt;

&lt;p&gt;Last but not least, there is an interesting Jasmine setup with RequireJS here by Peter Toomberg’s Shortcut project. This one does not require any additional setup declarations, but I did not yet look into this too much.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Before actually running a succesful Jasmine spec for a Backbone view, we need a library to actually match DOM nodes with expected values. The common library for doing this are the Jasmine-JQuery matchers These allow to express many things, among if the .el property of a Backbone view actually match a DOM node as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;View = Backbone.View.extend({tagName: &quot;li&quot; });
view = new View();


it(&quot;has el property&quot;, function() {
  expect(view.el).toBe(&quot;li&quot;);                                                                                                              
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My current setup can be found here: &lt;a href=&quot;https://github.com/mulderp/backbone-require-test/tree/view_specs&quot;&gt;https://github.com/mulderp/backbone-require-test/tree/view_specs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, so far my findings. Maybe they are helpful for others. I would be curious to hear what you think? How you approach testing of DOM nodes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rake-Pipeline, Rails-API, Backbone.JS</title>
   <link href="http://mulderp.github.com/MVC-and-Rails-API"/>
   <updated>2012-12-14T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/MVC-and-Rails-API</id>
   <content type="html">&lt;p&gt;Nowadays mobile browsers and changing use cases for web applications, require programmers to understand detailed DOM abstractions (usually html5 tags, css, js) as well as API’s that talk to a number of different client setups. Although Ruby-on-Rails has brought us a long way to easily meet our business goals, I had the feeling to be stuck when it came to use Backbone with Rails.&lt;/p&gt;

&lt;p&gt;There is Sprockets; and as long as I work with JQuery and use Twitter Bootstrap as default assets, Sprockets worked nicely: Sprockets gives some nice abstractions to bundle external asset dependencies, but if you want to develop your own client-side assets (e.g. Backbone programming and work with a Sass precompiler and Compass) Sprockets has some learning curve, and debugging asset problems is often painful. Also, for client-side development dealing with problems through a Rails stack is in my opinion not so ideal.&lt;/p&gt;

&lt;p&gt;Now, over the last months, I’ve found some options for a new toolchain that allows a better combination of client- and server-side programming. Here are my findings:&lt;/p&gt;

&lt;h2 id=&quot;rake-pipeline&quot;&gt;Rake-Pipeline&lt;/h2&gt;

&lt;p&gt;I’ve discovered this tool shortly after the great &lt;a href=&quot;http://baruco.org/&quot;&gt;Baruco conference&lt;/a&gt; 2012 in Barcelona. After talks from &lt;a href=&quot;http://blog.cookiestack.com/&quot;&gt;Josh Kalderimis&lt;/a&gt; and &lt;a href=&quot;https://github.com/rkh&quot;&gt;Konstantin Haase&lt;/a&gt; on software development at Travis, it was a nice discovery to see how Travis manages a modular &lt;a href=&quot;http://github.com/travis-ci/travis-assets.git&quot;&gt;asset repository&lt;/a&gt;. The tool that makes this work is: rake-pipeline. Here some background information on rake-pipeline:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Assetfile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;defines how precompilers, concat and copy commands can be combined to generate your assets as needed from a bunch of asset source files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rakep build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command reads the Assetfile definition and performs the actions on the sources. It’s the asset build step so to say.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rakep server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when developing your client-side assets, you actually don’t need to run rakep build from the command line. rakep server gives you a Sinatra server that nicely serves assets as they change during development.
Also, as a nice debugger for rake-pipeline, is a minimalistic Python webserver python -m SimpleHTTPServer that directly can serve all your files from the directory where you are in (e.g. /public). Quite handy if you just need some server, for quick-and-dirty browser debugging and experimentation.
So far about building assets, next about serving data that assets want… we’ll move on to:&lt;/p&gt;

&lt;h2 id=&quot;rails-api&quot;&gt;Rails-Api&lt;/h2&gt;

&lt;p&gt;Some weeks ago at &lt;a href=&quot;http://rupy.eu/&quot;&gt;Rupy in Brno&lt;/a&gt;, there was a great melting pot of Ruby, Python and JavaScript programmers, and if you were looking for the lowest common denominator, it might have been JSON and REST. Now, there is some discussion recently headed by &lt;a href=&quot;http://designinghypermediaapis.com/&quot;&gt;Steve Klabnik&lt;/a&gt; on how to interprete Roy Fielding’s ideas for modern Rails applications, but in this context, some nice tools are ready for use: The Rails-Api stack (and ActiveSerializer)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/rails-api/rails-api&quot;&gt;Rails-Api&lt;/a&gt; removes the Rails ERB templates and Sprockets from your application. This is nice, because your Rack stack becomes lighter, and you can focus on the thing that matters: Serving data to clients. From first experiments, Rails-API combines very nicely with rake-pipeline. As you can see from my &lt;a href=&quot;https://github.com/mulderp/rails-api-backbone&quot;&gt;demo-project&lt;/a&gt;, the Rails app just servers JSON to client-side code that is built with rake-pipeline from the /source directory.&lt;/p&gt;

&lt;h2 id=&quot;backbonejs-underscorejs-and-requirejs&quot;&gt;Backbone.js, Underscore.js and Require.js&lt;/h2&gt;

&lt;p&gt;Last but not least, for my application design, I want to use a JS framework that allows to structure the interaction with the DOM and with the end-user. This framework is Backbone.js - but maybe first, a step back.&lt;/p&gt;

&lt;p&gt;As a Ruby programmer, you think JavaScript has some problems: Incompatible browsers with different language implementations, as well as language constructs that leave you alone quite fast. At least part of the language problems are solved by JQuery and Underscore.js (which reminds on Ruby, see the collection stuff and enumerator constructs at underscorejs.org&lt;/p&gt;

&lt;p&gt;For the rest, a lot of folks from the Node.js community is an example of disruptive innovation at work; especially it is interesting to see, that the JS community nowadays has a modular requirement setup to manage dependencies: require.js. In my view, this will make fancy browser (and maybe one day server) programming fun again.&lt;/p&gt;

&lt;p&gt;What you need to know as Rails programmer, Require.js injects dependencies where they are needed, and as such prevents problems in the global scope. Additionally, you can inject HTML templates into your JS modules, which is very nice too. I’ll need to explore this, but you can actually take your Rails ERB templates and inject them 1-1 to Backbone templates, where you need them. Some ideas behind this technique are discussed by Thomas Davis, here. A boilerplate for backbone and require-js is here. Another nice overview on Backbone development is here and here (Backbone and Require.js).&lt;/p&gt;

&lt;p&gt;That’s all for now.&lt;/p&gt;

&lt;p&gt;Here some references to my &lt;a href=&quot;https://github.com/mulderp/rails-api-backbone&quot;&gt;Rake-Pipeline-Rails-Api-BackboneJS-RequireJS experiment&lt;/a&gt;. I hope to share some small screencasts soon, to show you why this toolchain is cool. At least for me, these tools make me #happy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An experiment with Vagrant and Neo4J</title>
   <link href="http://mulderp.github.com/An-experiment-with-Vagrant-and-Neo4J"/>
   <updated>2012-12-10T00:00:00+01:00</updated>
   <id>http:/mulderp.github.com/An-experiment-with-Vagrant-and-Neo4J</id>
   <content type="html">&lt;p&gt;The RuPy conference 2012 in Brno was very inspiring! Especially, there were some interesting talks on databases and scalable approaches to web development:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First,  the &lt;a href=&quot;http://www.arangodb.org&quot;&gt;ArangoDB&lt;/a&gt; team from Cologne set the tone why #nosql matters. The triAGENS team has written a database which mixes elements from MongoDB and graph databases. The shell of Arangodb looks very clean, and additionally, the system is based on C++ (= integrates with V8 JS engine and MRuby). &lt;/li&gt;
  &lt;li&gt;Another interesting talk was by Mitchell Hashimoto. He showed how Vagrant came into place, and why using isolated, virtual environments make sense for web integration. Some slides (not from Rupy) about this are &lt;a href=&quot;slideshare.net/mitchellh/sf-devops-introducing-vagrant&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Andreas Ronge gave a very nice talk on what graphs can do, and SQL can’t (well, it can, but not nicely … ) I can’t find his slides from RuPy right now, but he maintains a great blog on Neo4J here:  &lt;a href=&quot;http://maxdemarzi.com/&quot;&gt;http://maxdemarzi.com/&lt;/a&gt;  Also, these slides are interesting: &lt;a href=&quot;http://slideshare.net/andreasronge/neo4jrb&quot;&gt;slideshare.net/andreasronge/neo4jrb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, ok, coming home to Munich with all these interesting thoughts in my mind, it was clear, that I had to start playing with graph databases in isolated environments for new kind of web applications. Fortunately, I had great input for my learnings from Jorge Bianquetti and Nathen Harvey.&lt;/p&gt;

&lt;p&gt;First about Vagrant and VirtualBox. It takes a bit of time to download virtual machines, but it’s not too difficult to get going. The single, most important command might be:&lt;/p&gt;

&lt;pre&gt;
$ vagrant init
&lt;/pre&gt;

&lt;p&gt;This creates an environment for setting up a virtual machine. It’s very cool, because now, you can imagine to setup an Ubuntu, Debian, CentOS, or whatever system, and vagrant will try to go ahead, download or copies the VM and prepares it just that you can use it.&lt;/p&gt;

&lt;p&gt;Ok, not quite, since next, you must tell Vagrant where to download the box; you do it in the Vagrantfile,  e.g.:&lt;/p&gt;

&lt;pre&gt;
config.vm.box = &quot;opscode-ubuntu-12.04&quot;
config.vm.box_url = &quot;https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box&quot; 
&lt;/pre&gt;

&lt;p&gt;It’s the standard Ubuntu box from Opscode right now.
Just do a:&lt;/p&gt;

&lt;pre&gt;
$ vagrant up
&lt;/pre&gt;

&lt;p&gt;and you would have an Ubuntu box running.&lt;/p&gt;

&lt;p&gt;Well, we were charmed by graph databases, weren’t we?  Ok, so, let’s go ahead and add the setup for Neo4J. Some googling gives, that we have a Neo4J cookbook here: &lt;a href=&quot;https://github.com/michaelklishin/neo4j-server-chef-cookbook&quot;&gt;https://github.com/michaelklishin/neo4j-server-chef-cookbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hmm.. in this stage, we actually decided already for chef-solo. There is chef-solo and chef-server, and if you want to understand the difference, I suggest you look &lt;a href=&quot;http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Chef-server is the approach you want to use in production. Chef-solo is the approach for quick-and-dirty experiments, like we do here. So, let’s assume, chef-solo is ok, and we just need to get the cookbooks dependencies right. Luckily, we have a tool for this: chef-librarian.&lt;/p&gt;

&lt;pre&gt;
$ chef-librarian init
&lt;/pre&gt;

&lt;p&gt;This gives you a Cheffile. It’s similar to a Gemfile if you are used to Ruby.
Let’s throw in the Neo4J dependency here:&lt;/p&gt;

&lt;pre&gt;
cookbook 'apt'
cookbook 'neo4j-server', :git =&amp;gt; 'http://github.com/michaelklishin/neo4j-server-chef-cookbook'
&lt;/pre&gt;

&lt;p&gt;And now, similar to bundle install, we run librarian-chef install&lt;/p&gt;

&lt;p&gt;Last, but not least, we need to tell our VM that interaction with chef-solo is needed. You’ll do this by adding something into the Vagrantfile :&lt;/p&gt;

&lt;pre&gt;
config.vm.provision :chef_solo do |chef|
  chef.cookbooks_path = &quot;cookbooks&quot;
  chef.add_recipe &quot;apt&quot;
  chef.add_recipe &quot;neo4j-server::tarball&quot;
end
&lt;/pre&gt;

&lt;p&gt;Cool, now we only need to build our server, since our ingredients are prepared, and chef is ready for cooking. The magic command is:&lt;/p&gt;

&lt;pre&gt;
$ vagrant up
&lt;/pre&gt;

&lt;p&gt;You should see something like: &lt;/p&gt;

&lt;pre&gt;
[2012-12-10T20:33:58+00:00] INFO: *** Chef 10.14.4 ***
[2012-12-10T20:33:59+00:00] INFO: Setting the run_list to [&quot;recipe[apt]&quot;, &quot;recipe[neo4j-server::tarball]&quot;] from JSON
[2012-12-10T20:33:59+00:00] INFO: Run List is [recipe[apt], recipe[neo4j-server::tarball]]
[2012-12-10T20:33:59+00:00] INFO: Run List expands to [apt, neo4j-server::tarball]
[2012-12-10T20:33:59+00:00] INFO: Starting Chef Run for vagrant.vm
&lt;/pre&gt;

&lt;p&gt;This takes a while…. &lt;/p&gt;

&lt;p&gt;Eventually, you end up successfully, and you can do:&lt;/p&gt;

&lt;pre&gt;
$ vagrant ssh
&lt;/pre&gt;

&lt;p&gt;Now, your VM has Neo4J running on it, and if you enable port forwarding in Vagrant, you might even go to: localhost:7474 and enjoy your fresh Neo4J server.&lt;/p&gt;

&lt;h2 id=&quot;some-references&quot;&gt;Some References:&lt;/h2&gt;

&lt;p&gt;Chef and Neo4J
* Vimeo screencast: &lt;a href=&quot;https://vimeo.com/55085049&quot;&gt;https://vimeo.com/55085049&lt;/a&gt; , see: 
  Screencast Install Neo4j-server with Chef from Patrick Mulder on Vimeo.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git repo: &lt;a href=&quot;https://github.com/mulderp/chef-neo4j&quot;&gt;https://github.com/mulderp/chef-neo4j&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Chef basic steps with Nathen Harvey from Opscode
** &lt;a href=&quot;http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/&quot;&gt;Learning Chef Part 1&lt;/a&gt;
** &lt;a href=&quot;http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/&quot;&gt;Learning Chef Part 2&lt;/a&gt;
** &lt;a href=&quot;http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/&quot;&gt;Learning Chef Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
</feed>
